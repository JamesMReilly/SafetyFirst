module SafetyFirst.List

open ResultDotNet.FSharp

open SafetyFirst.ErrorTypes

/// Returns the average of the elements in the list.
/// Returns a SeqIsEmpty error if <c>source</c> has no elements.
let inline averageSafe source = 
  if List.isEmpty source
  then Error <| avgErr ()
  else Ok <| List.average source

/// Returns the average of the elements in the list.
/// Returns a SeqIsEmpty error if <c>source</c> has no elements.
let inline average' source = averageSafe source 

/// Returns the average of the results generated by applying the function to each element
/// of the list.
/// Returns a SeqIsEmpty error if <c>xs</c> has no elements.
let inline averageBySafe selector xs = 
  if List.isEmpty xs
  then Error <| avgErr ()
  else Ok <| List.averageBy selector xs

/// Returns the average of the results generated by applying the function to each element
/// of the list.
/// Returns a SeqIsEmpty error if <c>xs</c> has no elements.
let inline averageBy' selector xs = averageBySafe selector xs

/// Divides the input list into chunks of size at most <c>size</c>.
/// Returns a NegativeInput Error if the <c>size</c> is less than zero.
let chunkBySizeSafe size xs =
  if size <= 0 
  then Error chunkErr
  else Ok <| List.chunkBySize size xs

/// Divides the input list into chunks of size at most <c>size</c>.
/// Returns a NegativeInput Error if the <c>size</c> is less than zero.
let inline chunkBySize' size xs = chunkBySizeSafe size xs

/// If the input list has only one element, returns that element.
/// If the input list has more or less than one element, returns a WrongNumberOfElements Error.  
let exactlyOneSafe xs =
  match List.length xs with
  | 1 -> Ok <| List.head xs
  | 0 -> Error lessThanOneErr
  | _ -> Error moreThanOneErr 

/// If the input list has only one element, returns that element.
/// If the input list has more or less than one element, returns a WrongNumberOfElements Error.  
let inline exactlyOne' xs = exactlyOneSafe xs

/// Returns the first element for which the given function returns True.
/// Returns a NoMatchingElement Error if no such element is found.
let findSafe predicate xs = 
  List.tryFind predicate xs 
  |> Result.ofOption findErr

/// Returns the first element for which the given function returns True.
/// Returns a NoMatchingElement Error if no such element is found.
let inline find' predicate xs = findSafe predicate xs

/// Returns the last element for which the given function returns True.
/// Return a NoMatchingElement Error if no such element exists.
let findBackSafe predicate xs = 
  List.tryFindBack predicate xs
  |> Result.ofOption findErr

/// Returns the last element for which the given function returns True.
/// Return a NoMatchingElement Error if no such element exists.
let inline findBack' predicate xs = findBackSafe predicate xs

/// Returns the index of the first element in the list
/// that satisfies the given predicate.
/// Return a NoMatchingElement Error if no such element exists.
let findIndexSafe predicate xs = 
  List.tryFindIndex predicate xs
  |> Result.ofOption findErr

/// Returns the index of the first element in the list
/// that satisfies the given predicate.
/// Return a NoMatchingElement Error if no such element exists.
let inline findIndex' predicate xs = findIndexSafe predicate xs

/// Returns the index of the last element in the list
/// that satisfies the given predicate.
/// Return a NoMatchingElement Error if no such element exists.
let findIndexBackSafe predicate xs = 
  List.tryFindIndexBack predicate xs
  |> Result.ofOption findErr

/// Returns the index of the last element in the list
/// that satisfies the given predicate.
/// Return a NoMatchingElement Error if no such element exists.
let inline findIndexBack' predicate xs = findIndexBackSafe predicate xs

/// Applies a function to corresponding elements of two collections, threading an accumulator argument
/// through the computation. The collections must have identical sizes.
/// If the input function is f and the elements are i0...iN and j0...jN
/// then computes f (... (f s i0 j0)...) iN jN.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let fold2Safe folder initialState xs ys = 
  if List.length xs = List.length ys
  then Ok <| List.fold2 folder initialState xs ys
  else Error <| fold2Err (List.length xs) (List.length ys)

/// Applies a function to corresponding elements of two collections, threading an accumulator argument
/// through the computation. The collections must have identical sizes.
/// If the input function is f and the elements are i0...iN and j0...jN
/// then computes f (... (f s i0 j0)...) iN jN.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline fold2' folder initialState xs ys = fold2Safe folder initialState xs ys

/// Applies a function to corresponding elements of two collections, threading an accumulator argument
/// through the computation. The collections must have identical sizes.
/// If the input function is f and the elements are i0...iN and j0...jN
/// then computes f i0 j0 (...(f iN jN s)).
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let foldBack2Safe folder xs ys initialState = 
  if List.length xs = List.length ys
  then Ok <| List.foldBack2 folder xs ys initialState 
  else Error <| fold2Err (List.length xs) (List.length ys)

/// Applies a function to corresponding elements of two collections, threading an accumulator argument
/// through the computation. The collections must have identical sizes.
/// If the input function is f and the elements are i0...iN and j0...jN
/// then computes f i0 j0 (...(f iN jN s)).
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline foldBack2' folder xs ys initialState = foldBack2Safe folder xs ys initialState

/// Returns the first element of the list.
/// Returns a SeqIsEmpty error if <c>xs</c> has no elements.
let headSafe xs =
  if List.isEmpty xs 
  then Error headErr
  else Ok <| List.head xs

/// Returns the first element of the list.
/// Returns a SeqIsEmpty error if <c>xs</c> has no elements.
let inline head' xs = headSafe xs

/// Computes the element at the specified index in the collection.
/// Returns an IndexOutOfRange Error if the index is negative or exceeds the size of the collection.
let itemSafe index xs = 
  if index < 0
    then Error <| indexNegativeErr index
  elif List.length xs <= index
    then Error <| indexTooLargeErr index (List.length xs)
  else 
    Ok <| xs.[index]  

/// Computes the element at the specified index in the collection.
/// Returns an IndexOutOfRange Error if the index is negative or exceeds the size of the collection.
let inline item' index xs = itemSafe index xs

/// Applies the given function to two collections simultaneously. The collections must have identical size.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let iter2Safe action xs ys = 
  if List.length xs = List.length ys 
  then Ok <| List.iter2 action xs ys
  else Error <| iter2Err (List.length xs) (List.length ys)

/// Applies the given function to two collections simultaneously. The collections must have identical size.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline iter2' action xs ys = iter2Safe action xs ys

/// Applies the given function to two collections simultaneously. The
/// collections must have identical size. The integer passed to the
/// function indicates the index of element.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let iteri2Safe action xs ys = 
  if List.length xs = List.length ys 
  then Ok <| List.iteri2 action xs ys
  else Error <| iteri2Err (List.length xs) (List.length ys)

/// Applies the given function to two collections simultaneously. The
/// collections must have identical size. The integer passed to the
/// function indicates the index of element.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline iteri2' action xs ys = iteri2Safe action xs ys 

/// Returns the last element of the list.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let lastSafe xs = List.tryLast xs |> Result.ofOption lastErr  

/// Returns the last element of the list.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let inline last' xs = lastSafe xs

/// Builds a new collection whose elements are the results of applying the given function
/// to the corresponding elements of the two collections pairwise.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let map2Safe f xs ys = 
  if List.length xs = List.length ys 
  then Ok <| List.map2 f xs ys
  else Error <| map2Err (List.length xs) (List.length ys)

/// Builds a new collection whose elements are the results of applying the given function
/// to the corresponding elements of the two collections pairwise.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline map2' f xs ys = map2Safe f xs ys

/// Like mapi, but mapping corresponding elements from two lists of equal length.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let mapi2Safe f xs ys =
  if List.length xs = List.length ys 
  then Ok <| List.mapi2 f xs ys
  else Error <| mapi2Err (List.length xs) (List.length ys)

/// Like mapi, but mapping corresponding elements from two lists of equal length.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline mapi2' f xs ys = mapi2Safe f xs ys

/// Builds a new collection whose elements are the results of applying the given function
/// to the corresponding elements of the three collections simultaneously.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let map3Safe f xs ys zs = 
  if List.length xs = List.length ys && List.length xs = List.length zs
  then Ok <| List.map3 f xs ys zs
  else Error <| map3Err (List.length xs) (List.length ys) (List.length zs)

/// Builds a new collection whose elements are the results of applying the given function
/// to the corresponding elements of the three collections simultaneously.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline map3' f xs ys zs = map3Safe f xs ys zs

/// Returns the greatest of all elements of the list, compared via Operators.max.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let maxSafe<'a when 'a : comparison> (xs:'a list) =
  if List.isEmpty xs 
  then Error <| maxErr
  else Ok <| List.max xs

/// Returns the greatest of all elements of the list, compared via Operators.max.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let inline max'<'a when 'a : comparison> (xs:'a list) = maxSafe xs

/// Returns the greatest of all elements of the list, compared via Operators.max on the function result.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let maxBySafe<'a, 'b when 'b : comparison> (projection:'a -> 'b) (xs:'a list) =
  if List.isEmpty xs
  then Error <| maxErr
  else Ok <| List.maxBy projection xs

/// Returns the greatest of all elements of the list, compared via Operators.max on the function result.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let inline maxBy'<'a, 'b when 'b : comparison> (projection:'a -> 'b) (xs:'a list) = maxBySafe projection xs

/// Returns the lowest of all elements of the list, compared via Operators.min.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let minSafe<'a when 'a : comparison> (xs:'a list) =
  if List.isEmpty xs 
  then Error <| minErr
  else Ok <| List.min xs

/// Returns the lowest of all elements of the list, compared via Operators.min.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let inline min'<'a when 'a : comparison> (xs:'a list) = minSafe xs

/// Returns the lowest of all elements of the list, compared via Operators.min on the function result.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let minBySafe<'a, 'b when 'b : comparison> (projection:'a -> 'b) (xs:'a list) =
  if List.isEmpty xs 
  then Error <| minErr
  else Ok <| List.minBy projection xs

/// Returns the lowest of all elements of the list, compared via Operators.min on the function result.
/// Returns a SeqIsEmpty Error if <c>xs</c> has no elements.
let inline minBy'<'a, 'b when 'b : comparison> (projection:'a -> 'b) (xs:'a list) = minBySafe projection xs

/// Applies the given function to successive elements, returning the first
/// result where the function returns "Some(x)".
/// Return a NoMatchingElement Error if no such element exists.
let pickSafe chooser xs = 
  List.tryPick chooser xs
  |> Result.ofOption pickErr

/// Applies the given function to successive elements, returning the first
/// result where the function returns "Some(x)".
/// Return a NoMatchingElement Error if no such element exists.
let inline pick' chooser xs = pickSafe chooser xs

/// Applies a function to each element of the list, threading an accumulator argument
/// through the computation. Begin by applying the function to the first two elements.
/// Then feed this result into the function along with the third element and so on.
/// Return the final result.
/// Returns a SeqIsEmpty Error if the list is empty.
let reduceSafe reduction xs = 
  if List.isEmpty xs
  then Error <| reduceErr
  else Ok <| List.reduce reduction xs

/// Applies a function to each element of the list, threading an accumulator argument
/// through the computation. Begin by applying the function to the first two elements.
/// Then feed this result into the function along with the third element and so on.
/// Return the final result.
/// Returns a SeqIsEmpty Error if the list is empty.
let inline reduce' reduction xs = reduceSafe reduction xs

/// Applies a function to each element of the list, starting from the end, threading an accumulator argument
/// through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c>
/// then computes <c>f i0 (...(f iN-1 iN))</c>.
/// Returns a SeqIsEmpty Error if the list is empty.
let reduceBackSafe reduction xs = 
  if List.isEmpty xs
  then Error <| reduceErr
  else Ok <| List.reduceBack reduction xs

/// Applies a function to each element of the list, starting from the end, threading an accumulator argument
/// through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c>
/// then computes <c>f i0 (...(f iN-1 iN))</c>.
/// Returns a SeqIsEmpty Error if the list is empty.
let inline reduceBack' reduction xs = reduceBackSafe reduction xs 

/// Returns a list that skips N elements of the underlying list and then yields the
/// remaining elements of the list.
/// Returns a NotEnoughElements Error if <c>count</c> exceeds the length of <c>xs</c> 
let skipSafe count xs =
  if (List.length xs >= count) || count < 0
  then Ok <| List.skip count xs
  else Error <| lazySkipErr count 

/// Returns a list that skips N elements of the underlying list and then yields the
/// remaining elements of the list.
/// Returns a NotEnoughElements Error if <c>count</c> exceeds the length of <c>xs</c> 
let inline skip' count xs = skipSafe count xs

/// Splits a list into two lists, at the given index.
/// Returns an IndexOutOfBounds Error when split index exceeds 
/// the number of elements in the list.
let splitAtSafe index xs = 
  if index < 0 
    then Error <| indexNegativeErr index
  elif index > List.length xs
    then Error <| indexTooLargeErr index (List.length xs)
  else
    Ok <| List.splitAt index xs

/// Splits a list into two lists, at the given index.
/// Returns an IndexOutOfBounds Error when split index exceeds 
/// the number of elements in the list.
let inline splitAt' index xs = splitAtSafe index xs 

/// Splits the input list into at most count chunks.
/// Returns a NegativeInput Error if <c>count</c> is not positive.
let splitIntoSafe count xs = 
  if count > 0 
  then Ok <| List.splitInto count xs
  else Error <| splitIntoErr count

/// Splits the input list into at most count chunks.
/// Returns a NegativeInput Error if <c>count</c> is not positive.
let inline splitInto' count xs = splitIntoSafe count xs

/// Returns a list that skips 1 element of the underlying list and then yields the
/// remaining elements of the list.
/// Returns a SeqIsEmpty Error if <c>xs</c> contains no elements.
let tailSafe xs = 
  if List.isEmpty xs 
  then Error <| tailErr
  else Ok <| List.tail xs

/// Returns a list that skips 1 element of the underlying list and then yields the
/// remaining elements of the list.
/// Returns a SeqIsEmpty Error if <c>xs</c> contains no elements.
let inline tail' xs = tailSafe xs

/// Returns the first N elements of the list.
/// Returns a NotEnoughElements Error if <c>count</c> exceeds the length of <c>xs</c> 
let takeSafe count xs = 
  if List.length xs >= count && count >= 0
  then Ok <| List.take count xs
  else Error <| lazyTakeErr count

/// Returns the first N elements of the list.
/// Returns a NotEnoughElements Error if <c>count</c> exceeds the length of <c>xs</c> 
let inline take' count xs = takeSafe count xs

/// Returns a list that yields sliding windows containing elements drawn from the input
/// list. Each window is returned as a fresh array.
/// Returns a NegativeInput Error when <c>size</c> is not positive.
let windowedSafe size xs = 
  if size > 0 
  then Ok <| List.windowed size xs
  else Error <| windowedErr size

/// Returns a list that yields sliding windows containing elements drawn from the input
/// list. Each window is returned as a fresh array.
/// Returns a NegativeInput Error when <c>size</c> is not positive.
let inline windowed' size xs = windowedSafe size xs

/// Combines the two lists into a list of pairs. The two lists must have equal lengths.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let zipSafe xs ys = 
  if List.length xs = List.length ys
  then Ok <| List.zip xs ys 
  else Error <| zipErr (List.length xs) (List.length ys)

/// Combines the two lists into a list of pairs. The two lists must have equal lengths.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline zip' xs ys = zipSafe xs ys

/// Combines the three lists into a list of triples. The lists must have equal lengths.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let zip3Safe xs ys zs = 
  if List.length xs = List.length ys && List.length xs = List.length zs
  then Ok <| List.zip3 xs ys zs
  else Error <| zip3Err (List.length xs) (List.length ys) (List.length zs)

/// Combines the three lists into a list of triples. The lists must have equal lengths.
/// Returns a DifferingLengths Error if the input lists have a different number of elements.
let inline zip3' xs ys zs = zip3Safe xs ys zs

//TODO: transpose, split once we use a newer FSharp.Core